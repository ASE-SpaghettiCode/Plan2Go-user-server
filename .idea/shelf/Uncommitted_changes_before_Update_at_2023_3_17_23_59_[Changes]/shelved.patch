Index: src/main/java/ASESpaghettiCode/UserServer/UserServerApplication.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ASESpaghettiCode.UserServer;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\n\r\n@SpringBootApplication\r\npublic class UserServerApplication {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tSpringApplication.run(UserServerApplication.class, args);\r\n\t}\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ASESpaghettiCode/UserServer/UserServerApplication.java b/src/main/java/ASESpaghettiCode/UserServer/UserServerApplication.java
--- a/src/main/java/ASESpaghettiCode/UserServer/UserServerApplication.java	(revision fcb729858e491568de466d67ab41e45b8f12101d)
+++ b/src/main/java/ASESpaghettiCode/UserServer/UserServerApplication.java	(date 1679081184706)
@@ -1,13 +1,40 @@
 package ASESpaghettiCode.UserServer;
 
+import ASESpaghettiCode.UserServer.Controller.UserController;
+import ASESpaghettiCode.UserServer.Model.User;
+import ASESpaghettiCode.UserServer.Repository.UserRepository;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.CommandLineRunner;
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
+import org.springframework.context.annotation.ComponentScan;
+
 
 @SpringBootApplication
-public class UserServerApplication {
+@ComponentScan(basePackageClasses= UserController.class)
+public class UserServerApplication implements CommandLineRunner{
+	@Autowired
+	private UserRepository repository;
 
 	public static void main(String[] args) {
+
 		SpringApplication.run(UserServerApplication.class, args);
 	}
 
+	@Override
+	public void run(String... args)throws Exception{
+		repository.deleteAll();
+
+		repository.save(new User("Alice", "123456"));
+		repository.save(new User("Bob", "123456"));
+
+		System.out.println("Users found with findAll():");
+		for(User user:repository.findAll()){
+			System.out.println(user);
+		}
+		System.out.println();
+
+		System.out.println("User found with findByUsername('Alice'):");
+		System.out.println(repository.findByUsername("Alice"));
+	}
 }
Index: src/main/java/ASESpaghettiCode/UserServer/Model/user.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ASESpaghettiCode.UserServer.Model;public class user {\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ASESpaghettiCode/UserServer/Model/user.java b/src/main/java/ASESpaghettiCode/UserServer/Model/User.java
rename from src/main/java/ASESpaghettiCode/UserServer/Model/user.java
rename to src/main/java/ASESpaghettiCode/UserServer/Model/User.java
--- a/src/main/java/ASESpaghettiCode/UserServer/Model/user.java	(revision fcb729858e491568de466d67ab41e45b8f12101d)
+++ b/src/main/java/ASESpaghettiCode/UserServer/Model/User.java	(date 1679086732692)
@@ -1,2 +1,62 @@
-package ASESpaghettiCode.UserServer.Model;public class user {
+package ASESpaghettiCode.UserServer.Model;
+import lombok.Data;
+import org.springframework.data.annotation.Id;
+import org.springframework.data.mongodb.core.mapping.Document;
+
+@Data
+@Document
+public class User {
+    @Id
+    public String userId;
+    public String username;
+    public String password;
+    private String token;
+
+
+    public User(){
+
+    }
+    public User(String username, String password){
+        this.username=username;
+        this.password=password;
+    }
+    @Override
+    public String toString(){
+        return String.format(
+                "User[userId=%s,username='%s',password='%s']",
+                userId,username,password);
+    }
+
+    public String getUserId(){
+        return userId;
+    }
+
+    public String getUsername(){
+        return username;
+    }
+
+    public void setUsername(String username){
+        this.username=username;
+    }
+
+    public void setPassword(String password){
+        this.password=password;
+    }
+
+    public void setUserId(String userId){
+        this.userId=userId;
+    }
+
+    public String getPassword(){
+        return password;
+    }
+
+    public void setToken(String token){
+        this.token=token;
+    }
+
+    public String getToken(){
+        return token;
+    }
+
 }
Index: src/main/java/ASESpaghettiCode/UserServer/Controller/userController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ASESpaghettiCode.UserServer.Controller;\r\n\r\nimport org.springframework.web.bind.annotation.PathVariable;\r\nimport org.springframework.web.bind.annotation.RequestMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\n@RestController\r\n@RequestMapping(\"/user\")\r\npublic class userController {\r\n    @RequestMapping(\"/{userId}\")\r\n    public String getUser(@PathVariable(\"userId\") String userId) {\r\n        return \"User server is working.\"+ \"This is \"+userId;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ASESpaghettiCode/UserServer/Controller/userController.java b/src/main/java/ASESpaghettiCode/UserServer/Controller/UserController.java
rename from src/main/java/ASESpaghettiCode/UserServer/Controller/userController.java
rename to src/main/java/ASESpaghettiCode/UserServer/Controller/UserController.java
--- a/src/main/java/ASESpaghettiCode/UserServer/Controller/userController.java	(revision fcb729858e491568de466d67ab41e45b8f12101d)
+++ b/src/main/java/ASESpaghettiCode/UserServer/Controller/UserController.java	(date 1679093863865)
@@ -1,14 +1,71 @@
 package ASESpaghettiCode.UserServer.Controller;
 
-import org.springframework.web.bind.annotation.PathVariable;
-import org.springframework.web.bind.annotation.RequestMapping;
-import org.springframework.web.bind.annotation.RestController;
+import ASESpaghettiCode.UserServer.DTO.UserDTO;
+import ASESpaghettiCode.UserServer.Model.User;
+import ASESpaghettiCode.UserServer.Repository.UserRepository;
+
+import ASESpaghettiCode.UserServer.Service.UserService;
+import org.slf4j.LoggerFactory;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.http.HttpStatus;
+import org.springframework.web.bind.annotation.*;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import java.util.List;
+
 
 @RestController
-@RequestMapping("/user")
-public class userController {
-    @RequestMapping("/{userId}")
-    public String getUser(@PathVariable("userId") String userId) {
-        return "User server is working."+ "This is "+userId;
+public class UserController {
+    private final Logger LOG = LoggerFactory.getLogger(getClass());
+    private final UserRepository userRepository;
+    @Autowired
+    private UserService userService;
+    public UserController(UserRepository userRepository){
+        this.userRepository=userRepository;
+    }
+
+
+    @GetMapping("/users")
+    @ResponseStatus(HttpStatus.OK)
+    @ResponseBody
+    public List<User> getAllUsers(){
+        LOG.info("Getting all users");
+        return userRepository.findAll();
+    }
+
+    @GetMapping("/{userId}")
+    public User getUser(@PathVariable("userId") String userId) {
+        return userRepository.findByUserId(userId);
+    }
+
+    @RequestMapping("/{username}")
+    public User getUsername(@PathVariable("username") String username) {
+        return userRepository.findByUsername(username);
+    }
+    //register
+    @PostMapping("/users")
+    @ResponseStatus(HttpStatus.CREATED)
+    @ResponseBody
+    public User createUser(@RequestBody User user){
+
+        return user;
     }
+
+    //login
+    @PostMapping("/users/checking")
+    @ResponseStatus(HttpStatus.OK)
+    @ResponseBody
+    public User loginUser(@RequestBody User user) {
+        return user;
+    }
+
+    //logout
+    @PutMapping("/users/checking/{userId}")
+    @ResponseStatus(HttpStatus.OK)
+    @ResponseBody
+    public void logoutUser(@PathVariable String userId){
+        User user = userRepository.findByUserId(userId);
+    }
+
 }
+
Index: src/main/java/ASESpaghettiCode/UserServer/Model/users.java
===================================================================
diff --git a/src/main/java/ASESpaghettiCode/UserServer/Model/users.java b/src/main/java/ASESpaghettiCode/UserServer/Model/users.java
deleted file mode 100644
--- a/src/main/java/ASESpaghettiCode/UserServer/Model/users.java	(revision fcb729858e491568de466d67ab41e45b8f12101d)
+++ /dev/null	(revision fcb729858e491568de466d67ab41e45b8f12101d)
@@ -1,4 +0,0 @@
-package ASESpaghettiCode.UserServer.Model;
-
-public class users {
-}
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
new file mode 100644
--- /dev/null	(date 1679082570918)
+++ b/.idea/misc.xml	(date 1679082570918)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ExternalStorageConfigurationManager" enabled="true" />
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_11" default="true" project-jdk-name="jbr-11" project-jdk-type="JavaSDK" />
+  <component name="ProjectType">
+    <option name="id" value="jpab" />
+  </component>
+</project>
\ No newline at end of file
Index: .idea/gradle.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/gradle.xml b/.idea/gradle.xml
new file mode 100644
--- /dev/null	(date 1678985834633)
+++ b/.idea/gradle.xml	(date 1678985834633)
@@ -0,0 +1,18 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="GradleMigrationSettings" migrationVersion="1" />
+  <component name="GradleSettings">
+    <option name="linkedExternalProjectsSettings">
+      <GradleProjectSettings>
+        <option name="distributionType" value="DEFAULT_WRAPPED" />
+        <option name="externalProjectPath" value="$PROJECT_DIR$" />
+        <option name="gradleJvm" value="#JAVA_HOME" />
+        <option name="modules">
+          <set>
+            <option value="$PROJECT_DIR$" />
+          </set>
+        </option>
+      </GradleProjectSettings>
+    </option>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
new file mode 100644
--- /dev/null	(date 1678974206184)
+++ b/.idea/vcs.xml	(date 1678974206184)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: src/main/java/ASESpaghettiCode/UserServer/DTO/UserDTO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ASESpaghettiCode/UserServer/DTO/UserDTO.java b/src/main/java/ASESpaghettiCode/UserServer/DTO/UserDTO.java
new file mode 100644
--- /dev/null	(date 1679062160557)
+++ b/src/main/java/ASESpaghettiCode/UserServer/DTO/UserDTO.java	(date 1679062160557)
@@ -0,0 +1,42 @@
+package ASESpaghettiCode.UserServer.DTO;
+import ASESpaghettiCode.UserServer.Model.User;
+
+import java.util.List;
+
+
+public class UserDTO {
+    private String userId;
+    private String username;
+    private String password;
+
+    public UserDTO(){
+
+    }
+    public UserDTO(String userId,String username,String password){
+        this.userId=userId;
+        this.username=username;
+        this.password=password;
+    }
+
+    public String getUserId(){
+        return userId;
+    }
+    public String getUsername(){
+        return username;
+    }
+    public String getPassword(){
+        return password;
+    }
+    public void setUserId(String userId) {
+        this.userId=userId;
+    }
+
+    public void setUsername(String username){
+        this.username=username;
+    }
+
+    public void setPassword(String password){
+        this.password=password;
+    }
+
+}
Index: .idea/compiler.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/compiler.xml b/.idea/compiler.xml
new file mode 100644
--- /dev/null	(date 1679092322335)
+++ b/.idea/compiler.xml	(date 1679092322335)
@@ -0,0 +1,16 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="CompilerConfiguration">
+    <annotationProcessing>
+      <profile name="Gradle Imported" enabled="true">
+        <outputRelativeToContentRoot value="true" />
+        <processorPath useClasspath="false">
+          <entry name="$USER_HOME$/.gradle/caches/modules-2/files-2.1/org.projectlombok/lombok/1.18.26/8f8cf0372abf564913e9796623aac4c8ea44025a/lombok-1.18.26.jar" />
+          <entry name="$USER_HOME$/.gradle/caches/modules-2/files-2.1/org.mapstruct/mapstruct-processor/1.5.3.Final/dce418bedafd71ff8dd2cef15006c0fee788b073/mapstruct-processor-1.5.3.Final.jar" />
+        </processorPath>
+        <module name="UserServer.main" />
+      </profile>
+    </annotationProcessing>
+    <bytecodeTargetLevel target="11" />
+  </component>
+</project>
\ No newline at end of file
Index: .idea/jarRepositories.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/jarRepositories.xml b/.idea/jarRepositories.xml
new file mode 100644
--- /dev/null	(date 1678974206253)
+++ b/.idea/jarRepositories.xml	(date 1678974206253)
@@ -0,0 +1,20 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="RemoteRepositoriesConfiguration">
+    <remote-repository>
+      <option name="id" value="central" />
+      <option name="name" value="Maven Central repository" />
+      <option name="url" value="https://repo1.maven.org/maven2" />
+    </remote-repository>
+    <remote-repository>
+      <option name="id" value="jboss.community" />
+      <option name="name" value="JBoss Community repository" />
+      <option name="url" value="https://repository.jboss.org/nexus/content/repositories/public/" />
+    </remote-repository>
+    <remote-repository>
+      <option name="id" value="MavenRepo" />
+      <option name="name" value="MavenRepo" />
+      <option name="url" value="https://repo.maven.apache.org/maven2/" />
+    </remote-repository>
+  </component>
+</project>
\ No newline at end of file
Index: src/main/java/ASESpaghettiCode/UserServer/Mapper/DTOMapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ASESpaghettiCode/UserServer/Mapper/DTOMapper.java b/src/main/java/ASESpaghettiCode/UserServer/Mapper/DTOMapper.java
new file mode 100644
--- /dev/null	(date 1679085596898)
+++ b/src/main/java/ASESpaghettiCode/UserServer/Mapper/DTOMapper.java	(date 1679085596898)
@@ -0,0 +1,6 @@
+package ASESpaghettiCode.UserServer.Mapper;
+import org.springframework.web.bind.annotation.Mapping;
+
+
+public interface DTOMapper {
+}
Index: .idea/runConfigurations.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/runConfigurations.xml b/.idea/runConfigurations.xml
new file mode 100644
--- /dev/null	(date 1678974206263)
+++ b/.idea/runConfigurations.xml	(date 1678974206263)
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="RunConfigurationProducerService">
+    <option name="ignoredProducers">
+      <set>
+        <option value="com.android.tools.idea.compose.preview.runconfiguration.ComposePreviewRunConfigurationProducer" />
+      </set>
+    </option>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/codeStyles/Project.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/codeStyles/Project.xml b/.idea/codeStyles/Project.xml
new file mode 100644
--- /dev/null	(date 1678974206232)
+++ b/.idea/codeStyles/Project.xml	(date 1678974206232)
@@ -0,0 +1,7 @@
+<component name="ProjectCodeStyleConfiguration">
+  <code_scheme name="Project" version="173">
+    <ScalaCodeStyleSettings>
+      <option name="MULTILINE_STRING_CLOSING_QUOTES_ON_NEW_LINE" value="true" />
+    </ScalaCodeStyleSettings>
+  </code_scheme>
+</component>
\ No newline at end of file
Index: .idea/codeStyles/codeStyleConfig.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/codeStyles/codeStyleConfig.xml b/.idea/codeStyles/codeStyleConfig.xml
new file mode 100644
--- /dev/null	(date 1678974206243)
+++ b/.idea/codeStyles/codeStyleConfig.xml	(date 1678974206243)
@@ -0,0 +1,5 @@
+<component name="ProjectCodeStyleConfiguration">
+  <state>
+    <option name="PREFERRED_PROJECT_CODE_STYLE" value="Default" />
+  </state>
+</component>
\ No newline at end of file
Index: .idea/junitgenerator-prj-settings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/junitgenerator-prj-settings.xml b/.idea/junitgenerator-prj-settings.xml
new file mode 100644
--- /dev/null	(date 1679049826360)
+++ b/.idea/junitgenerator-prj-settings.xml	(date 1679049826360)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="JUnitGeneratorProjectSettings">
+    <option name="selectedTemplateKey" value="JUnit 4" />
+  </component>
+</project>
\ No newline at end of file
Index: .idea/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/.gitignore b/.idea/.gitignore
new file mode 100644
--- /dev/null	(date 1678974206418)
+++ b/.idea/.gitignore	(date 1678974206418)
@@ -0,0 +1,3 @@
+# Default ignored files
+/shelf/
+/workspace.xml
Index: .idea/.name
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/.name b/.idea/.name
new file mode 100644
--- /dev/null	(date 1678974205654)
+++ b/.idea/.name	(date 1678974205654)
@@ -0,0 +1,1 @@
+UserServer
\ No newline at end of file
Index: build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>plugins {\r\n\tid 'java'\r\n\tid 'org.springframework.boot' version '2.7.9'\r\n\tid 'io.spring.dependency-management' version '1.0.15.RELEASE'\r\n}\r\n\r\ngroup = 'ASE-SpaghettiCode'\r\nversion = '0.0.1-SNAPSHOT'\r\nsourceCompatibility = '11'\r\n\r\nconfigurations {\r\n\tcompileOnly {\r\n\t\textendsFrom annotationProcessor\r\n\t}\r\n}\r\n\r\nrepositories {\r\n\tmavenCentral()\r\n}\r\n\r\ndependencies {\r\n\timplementation 'org.springframework.boot:spring-boot-starter-data-mongodb'\r\n\timplementation 'org.springframework.boot:spring-boot-starter-data-mongodb-reactive'\r\n\timplementation 'org.springframework.boot:spring-boot-starter-web'\r\n\tcompileOnly 'org.projectlombok:lombok'\r\n\tannotationProcessor 'org.projectlombok:lombok'\r\n\ttestImplementation 'org.springframework.boot:spring-boot-starter-test'\r\n\ttestImplementation 'io.projectreactor:reactor-test'\r\n}\r\n\r\ntasks.named('test') {\r\n\tuseJUnitPlatform()\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/build.gradle b/build.gradle
--- a/build.gradle	(revision fcb729858e491568de466d67ab41e45b8f12101d)
+++ b/build.gradle	(date 1679086203571)
@@ -22,10 +22,13 @@
 	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
 	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb-reactive'
 	implementation 'org.springframework.boot:spring-boot-starter-web'
+	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
 	compileOnly 'org.projectlombok:lombok'
 	annotationProcessor 'org.projectlombok:lombok'
 	testImplementation 'org.springframework.boot:spring-boot-starter-test'
 	testImplementation 'io.projectreactor:reactor-test'
+	implementation 'org.mapstruct:mapstruct:1.5.3.Final'
+	annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.3.Final'
 }
 
 tasks.named('test') {
Index: src/main/java/ASESpaghettiCode/UserServer/Repository/UserRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ASESpaghettiCode/UserServer/Repository/UserRepository.java b/src/main/java/ASESpaghettiCode/UserServer/Repository/UserRepository.java
new file mode 100644
--- /dev/null	(date 1679082866114)
+++ b/src/main/java/ASESpaghettiCode/UserServer/Repository/UserRepository.java	(date 1679082866114)
@@ -0,0 +1,12 @@
+package ASESpaghettiCode.UserServer.Repository;
+
+import ASESpaghettiCode.UserServer.Model.User;
+import org.springframework.data.mongodb.repository.MongoRepository;
+
+import java.util.List;
+
+public interface UserRepository extends MongoRepository<User, String> {
+    public List<User> findAll();
+    public User findByUsername(String username);
+    public User findByUserId(String userId);
+}
Index: src/main/java/ASESpaghettiCode/UserServer/Service/UserService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ASESpaghettiCode/UserServer/Service/UserService.java b/src/main/java/ASESpaghettiCode/UserServer/Service/UserService.java
new file mode 100644
--- /dev/null	(date 1679093468573)
+++ b/src/main/java/ASESpaghettiCode/UserServer/Service/UserService.java	(date 1679093468573)
@@ -0,0 +1,29 @@
+package ASESpaghettiCode.UserServer.Service;
+
+import ASESpaghettiCode.UserServer.Model.User;
+import ASESpaghettiCode.UserServer.Repository.UserRepository;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+import org.springframework.transaction.annotation.Transactional;
+
+import java.util.List;
+import java.util.Optional;
+import java.util.UUID;
+
+@Service
+@Transactional
+public class UserService {
+
+    @Autowired
+    private UserRepository userRepository;
+
+    public List<User> getUsers() {
+        return this.userRepository.findAll();
+    }
+
+    public User save(User user){
+        userRepository.save(user);
+        return user;
+    }
+
+}
\ No newline at end of file
